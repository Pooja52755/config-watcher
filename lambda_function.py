import boto3
import json

def parse_env(content):
    # Split content by newlines, clean up any carriage returns, and then split by '='
    lines = content.strip().replace('\r', '').split("\n")
    return {line.split("=")[0]: line.split("=")[1] for line in lines if "=" in line}

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    bucket = 'configwatcher-envs'
    env_files = ['local.env', 'staging.env', 'production.env']
    configs = {}

    for key in env_files:
        obj = s3.get_object(Bucket=bucket, Key=key)
        content = obj['Body'].read().decode('utf-8')
        configs[key.split('.')[0]] = parse_env(content) # Use the updated parse_env

    local = configs['local']
    staging = configs['staging']
    production = configs['production']

    drift_report = []

    # Collect all unique keys from all environments
    all_keys = set(local.keys()).union(staging.keys(), production.keys())

    for key in sorted(list(all_keys)): # Sort keys for consistent report order
        values = {
            "local": local.get(key, "❌ MISSING"),
            "staging": staging.get(key, "❌ MISSING"),
            "production": production.get(key, "❌ MISSING")
        }
        # Check for drift: if there's more than one unique value among local, staging, production
        if len(set(values.values())) > 1:
            drift_report.append({key: values})

    # --- Email Content Generation ---
    num_drifts = len(drift_report)
    subject = f"Config Drift Alert: {num_drifts} Discrepancies Found"
    if num_drifts == 0:
        subject = "ConfigWatcher Report: No Drifts Detected"

    # Plain Text Body
    plain_body = f"Hello,\n\n"
    plain_body += f"Your ConfigWatcher detected {num_drifts} configuration drifts.\n\n"
    if num_drifts > 0:
        plain_body += "Please review the following discrepancies:\n\n"
        for drift_item in drift_report:
            for key, environments in drift_item.items():
                plain_body += f"  - Variable: {key}\n"
                for env, value in environments.items():
                    plain_body += f"    {env.capitalize()}: {value}\n"
            plain_body += "\n"
    else:
        plain_body += "All configurations are consistent across environments. No action required.\n\n"
    plain_body += "Best regards,\nConfigWatcher"


    # HTML Body
    html_body = """<html>
    <head>
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
            h1 {{ color: #d9534f; }}
            h2 {{ color: #5cb85c; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
            th, td {{ border: 1px solid #ddd; padding: 10px; text-align: left; }}
            th {{ background-color: #f2f2f2; color: #555; }}
            .missing {{ color: #d9534f; font-weight: bold; }}
            .no-drifts {{ color: #5cb85c; font-weight: bold; }}
        </style>
    </head>
    <body>
    """

    if num_drifts > 0:
        html_body += f"<h1>Config Drift Alert ({num_drifts} Found)</h1>"
        html_body += "<p>The following configuration variables have **discrepancies** across your environments:</p>"
        html_body += "<table>"
        html_body += "<thead><tr><th>Variable</th><th>Local</th><th>Staging</th><th>Production</th></tr></thead>"
        html_body += "<tbody>"

        for drift_item in drift_report:
            for key, environments in drift_item.items():
                local_val = environments.get('local', '').replace('❌ MISSING', '<span class="missing">❌ MISSING</span>')
                staging_val = environments.get('staging', '').replace('❌ MISSING', '<span class="missing">❌ MISSING</span>')
                production_val = environments.get('production', '').replace('❌ MISSING', '<span class="missing">❌ MISSING</span>')

                html_body += f"<tr>"
                html_body += f"<td><strong>{key}</strong></td>"
                html_body += f"<td>{local_val}</td>"
                html_body += f"<td>{staging_val}</td>"
                html_body += f"<td>{production_val}</td>"
                html_body += f"</tr>"

        html_body += "</tbody></table>"
        html_body += "<p>Please investigate these differences to ensure consistency and prevent unexpected behavior.</p>"
    else:
        html_body += """<h2 class="no-drifts">✅ No Config Drifts Detected!</h2>
        <p>All environments are consistent. Your configurations are looking good!</p>"""

    html_body += """
        <p>This report was generated by ConfigWatcher.</p>
    </body>
    </html>
    """

    # --- SES Client and Send Email ---
    ses = boto3.client('ses', region_name='us-east-1') # Use correct region

    response = ses.send_email(
        Source='harshitapoojaande@gmail.com',  # Must be verified in SES
        Destination={'ToAddresses': ['harshitapoojaande@gmail.com']}, # Must be verified if in sandbox
        Message={
            'Subject': {'Data': subject},
            'Body': {
                'Html': {'Data': html_body},
                'Text': {'Data': plain_body} # Provide a plain text fallback
            }
        },
        # Assuming you've set up a ConfigurationSet named 'MyLambdaEmailEvents' for debugging/monitoring
        # If not, you can remove this line.
        # ConfigurationSetName='MyLambdaEmailEvents'
    )

    return {
        'statusCode': 200,
        'body': f'Email sent. MessageId: {response["MessageId"]}'
    }
