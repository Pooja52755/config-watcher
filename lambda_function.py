import boto3
import json
import datetime   # for timestamped filenames

def parse_env(content):
    # safer split: only split on the first '='
    lines = content.strip().replace('\r', '').split("\n")
    return {line.split("=", 1)[0]: line.split("=", 1)[1]
            for line in lines if "=" in line}

def lambda_handler(event, context):
    # --- AWS clients --------------------------------------------------------
    s3  = boto3.client('s3')
    ses = boto3.client('ses', region_name='us-east-1')  # adjust if needed

    # --- S3 & file setup ----------------------------------------------------
    bucket     = 'configwatcher-envs'
    env_files  = ['local.env', 'staging.env', 'production.env']
    configs    = {}

    for key in env_files:
        obj      = s3.get_object(Bucket=bucket, Key=key)
        content  = obj['Body'].read().decode('utf-8')
        configs[key.split('.')[0]] = parse_env(content)

    local, staging, production = (configs['local'],
                                  configs['staging'],
                                  configs['production'])

    # --- Drift detection ----------------------------------------------------
    drift_report = []
    all_keys = set(local) | set(staging) | set(production)
    for k in sorted(all_keys):
        vals = {
            'local'      : local.get(k, '❌ MISSING'),
            'staging'    : staging.get(k, '❌ MISSING'),
            'production' : production.get(k, '❌ MISSING')
        }
        if len(set(vals.values())) > 1:
            drift_report.append({k: vals})

    num = len(drift_report)
    subject = (f"Config Drift Alert: {num} Discrepanc{'y' if num==1 else 'ies'} Found"
               if num else
               "ConfigWatcher Report: No Drifts Detected")

    # --- Build email bodies -------------------------------------------------
    plain_body = build_plain_body(num, drift_report)
    html_body  = build_html_body(num, drift_report)

    # --- Send the email -----------------------------------------------------
    ses.send_email(
        Source='harshitapoojaande@gmail.com',
        Destination={'ToAddresses': ['ande.harshitapooja@gmail.com']},
        Message={
            'Subject': {'Data': subject},
            'Body'   : {
                'Html': {'Data': html_body},
                'Text': {'Data': plain_body}
            }
        }
    )

    # --- ALSO save HTML report to S3 ---------------------------------------
    timestamp  = datetime.datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')
    report_key = f"reports/drift_{timestamp}.html"   # tidy “folder”

    s3.put_object(
        Bucket=bucket,
        Key=report_key,
        Body=html_body.encode('utf-8'),
        ContentType='text/html'
    )

    return {
        'statusCode': 200,
        'body': json.dumps({
            'message'   : f'Email sent. Report stored at s3://{bucket}/{report_key}'
        })
    }

# ---------------------------------------------------------------------------
# Helper functions (unchanged except split("=",1) safety)
# ---------------------------------------------------------------------------
def build_plain_body(num, report):
    out = [f"Hello,\n\nYour ConfigWatcher detected {num} configuration drift(s).\n"]
    if num:
        out.append("Please review the following discrepancies:\n")
        for item in report:
            for var, envs in item.items():
                out.append(f"  - Variable: {var}")
                for env, val in envs.items():
                    out.append(f"    {env.capitalize():<10}: {val}")
            out.append("")
    else:
        out.append("All configurations are consistent. No action required.\n")
    out.append("Best regards,\nConfigWatcher")
    return "\n".join(out)

def build_html_body(num, report):
    head = """
    <html><head><style>
      body{font-family:Arial,sans-serif;line-height:1.6;color:#333;}
      table{width:100%;border-collapse:collapse;margin-top:20px;}
      th,td{border:1px solid #ddd;padding:10px;text-align:left;}
      th{background:#f2f2f2;color:#555;}
      .missing{color:#d9534f;font-weight:bold;}
      .nodrift{color:#5cb85c;font-weight:bold;}
    </style></head><body>"""
    tail = "<p>This report was generated by ConfigWatcher.</p></body></html>"

    if num == 0:
        return head + '<h2 class="nodrift">✅ No Config Drifts Detected!</h2>' + tail

    rows = ""
    for item in report:
        for var, envs in item.items():
            def fmt(x):  # highlight missing entries
                return x.replace('❌ MISSING',
                    '<span class="missing">❌ MISSING</span>')
            rows += (f"<tr><td><strong>{var}</strong></td>"
                     f"<td>{fmt(envs['local'])}</td>"
                     f"<td>{fmt(envs['staging'])}</td>"
                     f"<td>{fmt(envs['production'])}</td></tr>")
    body = (f"<h1>Config Drift Alert ({num} Found)</h1>"
            "<p>The following configuration variables have discrepancies:</p>"
            "<table><thead><tr>"
            "<th>Variable</th><th>Local</th><th>Staging</th><th>Production</th>"
            "</tr></thead><tbody>"
            f"{rows}</tbody></table>")
    return head + body + tail
